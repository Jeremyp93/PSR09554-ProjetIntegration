//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ExamenProjetIntegrationEntities : DbContext
    {
        public ExamenProjetIntegrationEntities()
            : base("name=ExamenProjetIntegrationEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Cour> Cours { get; set; }
        public virtual DbSet<Niveau> Niveaux { get; set; }
        public virtual DbSet<Professeur> Professeurs { get; set; }
        public virtual DbSet<TypeCour> TypeCours { get; set; }
    
        public virtual ObjectResult<GetAllCours_Result> GetAllCours()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCours_Result>("GetAllCours");
        }
    
        public virtual ObjectResult<GetFiltre_Result> GetFiltre(string typecours, string typediscipline, string niveau, Nullable<System.DateTime> date)
        {
            var typecoursParameter = typecours != null ?
                new ObjectParameter("typecours", typecours) :
                new ObjectParameter("typecours", typeof(string));
    
            var typedisciplineParameter = typediscipline != null ?
                new ObjectParameter("typediscipline", typediscipline) :
                new ObjectParameter("typediscipline", typeof(string));
    
            var niveauParameter = niveau != null ?
                new ObjectParameter("niveau", niveau) :
                new ObjectParameter("niveau", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFiltre_Result>("GetFiltre", typecoursParameter, typedisciplineParameter, niveauParameter, dateParameter);
        }
    
        public virtual ObjectResult<GetFiltreDetail_Result> GetFiltreDetail(Nullable<System.Guid> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetFiltreDetail_Result>("GetFiltreDetail", idParameter);
        }
    }
}
